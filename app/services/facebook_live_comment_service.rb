class FacebookLiveCommentService
  def initialize(live_id, access_token = nil, user = nil)
    @live_id = live_id
    @access_token = access_token
    @user = user # ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏≤ Merchant ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Order
  end

  def fetch_comments
    unless @user
      puts "\e[31m[‡πÑ‡∏°‡πà‡∏û‡∏ö User (merchant)]\e[0m"
      return []
    end

    if @user.products.empty?
      puts "\e[31m[‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡πà‡∏µ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö] User ID: #{@user.id}\e[0m"
      return []
    end

    # url = "https://streaming-graph.facebook.com/#{live_id}/live_comments?access_token=#{@access_token}&comment_rate=one_per_two_seconds&fields=from{name,id},message',created_time"
    # response = HTTParty.get(url)
    # if response.success?
    # comments = response.parsed_response["data"] || [] # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô 'data' ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡πá‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô Array ‡∏ß‡πà‡∏≤‡∏á
    # Rails.logger.info "Fetched #{comments.size} comments for Facebook Live ID: #{@live_id}"

    # Mock response data for testing
    comments = [
      # ‡∏™‡∏£‡πâ‡∏≤‡∏á comment ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö productCode 1
      *Array.new(2) { |i| { "id" => "c1_#{i}", "message" => "CF 1", "created_time" => "2023-10-01T12:00:00+0000", "from" => { "id" => "user#{i}", "name" => "User #{i}" } } },
      # ‡∏™‡∏£‡πâ‡∏≤‡∏á comment ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö productCode 2
      *Array.new(2) { |i| { "id" => "c2_#{i}", "message" => "CF 2", "created_time" => "2023-10-01T12:01:00+0000", "from" => { "id" => "user#{i + 2}", "name" => "User #{i + 2}" } } },
      # ‡∏™‡∏£‡πâ‡∏≤‡∏á comment ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö productCode 3
      *Array.new(2) { |i| { "id" => "c3_#{i}", "message" => "CF 3", "created_time" => "2023-10-01T12:02:00+0000", "from" => { "id" => "user#{i + 10}", "name" => "User #{i + 10}" } } },
      # ‡∏™‡∏£‡πâ‡∏≤‡∏á comment ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö productCode 12342
      *Array.new(2) { |i| { "id" => "c4#{i}", "message" => "CF 4", "created_time" => "2023-10-01T12:03:00+0000", "from" => { "id" => "user#{i + 12}", "name" => "User #{i + 12}" } } },
    ].flatten

    # ‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô comment ‡∏°‡∏≤‡∏ß‡∏ô‡∏•‡∏π‡∏õ ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Hash ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ comment
    created_orders = []
    comments.each do |comment|
      comment_data = {
        id: comment["id"],
        message: comment["message"],
        created_time: comment["created_time"],
        from: comment["from"] ? {
          id: comment["from"]["id"],
          name: comment["from"]["name"],
        } : nil,
      }

      cf_result = create_order(comment_data)
      created_orders << cf_result if cf_result.present?
    end
    created_orders
  rescue StandardError => e
    Rails.logger.error("Failed to fetch comments for Facebook Live: #{@live_id}, Error: #{e.message}")
    []
  end

  def create_order(data)
    message = data[:message].to_s

    # ‡∏î‡∏∂‡∏á‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤, ‡∏Å‡∏≥‡∏à‡∏±‡∏î nil, ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô string ‡πÅ‡∏•‡∏∞ normalize ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô lowercase
    product_codes = Product.active.where(user_id: @user.id).pluck(:productCode).compact.map { |c| c.to_s.strip.downcase }.uniq

    if product_codes.empty?
      puts "\e[31m[Merchant ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏•‡∏¢] User ID: #{@user.id}\e[0m"
      return nil
    end

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏´‡∏±‡∏™‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏ß‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£ match ‡πÅ‡∏ö‡∏ö substring ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    product_codes.sort_by! { |c| -c.length }

    # normalize ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à (lowercase)
    message_norm = message.downcase

    # ‡πÉ‡∏ä‡πâ word-boundary regex ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏°‡∏ï‡∏ä‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏´‡∏£‡∏∑‡∏≠ token ‡πÅ‡∏¢‡∏Å (‡∏•‡∏î false positives)
    found_code = product_codes.find do |code|
      regex = /\b#{Regexp.escape(code)}\b/
      message_norm.match?(regex)
    end

    unless found_code
      puts "\e[31m[‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°] Product codes: #{product_codes.join(", ")}\e[0m"
      return nil
    end

    product = Product.active.find_by(productCode: found_code.to_i)
    unless product
      puts "\e[31m[‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤] Product code: #{found_code}\e[0m"
      return nil
    end

    unless @user
      puts "\e[31m[‡πÑ‡∏°‡πà‡∏û‡∏ö User (merchant)]\e[0m"
      return nil
    end
    puts "\e[36m[‡πÉ‡∏ä‡πâ merchant] #{@user.name} (ID: #{@user.id})\e[0m"

    puts "\n---------------------"
    puts "[‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà] Data:"
    puts JSON.pretty_generate(data)
    puts "---------------------"

    # ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å service
    shipping_cost_cents = 5000
    insufficient_credit = !@user.has_sufficient_credit?(shipping_cost_cents)

    if insufficient_credit
      puts "\e[31m[‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï] ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£: #{shipping_cost_cents}, ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà: #{@user.credit_balance_cents}\e[0m"
      # ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô Background)
      # SellerMailer.insufficient_credit_notification(
      #   user: @user,
      #   order_details: {
      #     customer_name: data.dig(:from, :name),
      #     product_name: product.productName,
      #     product_code: product.productCode,
      #   },
      #   required_credit: shipping_cost_cents,
      # ).deliver_later
    end

    # ‡∏£‡∏ß‡∏°‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏û‡∏±‡∏Å‡πÑ‡∏ß‡πâ‡∏î‡πâ‡∏ß‡∏¢ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÑ‡∏°‡πà‡∏û‡∏≠
    existing_order = Order.where(deleted_at: nil, status: [
                                  Order.statuses[:pending],
                                  Order.statuses[:paid],
                                  Order.statuses[:on_hold_insufficient_credit],
                                ]).find_by(
      facebook_user_id: data[:from][:id],
      order_number: found_code,
      user: @user,
    )

    if existing_order
      puts "\e[33m[‡∏û‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏•‡πâ‡∏ß] Comment #{data[:id]} -> Order: #{existing_order.order_number}\e[0m"
      return existing_order
    end

    begin
      quantity = 1
      unit_price = product.productPrice
      total_amount = unit_price * quantity

      order_status = insufficient_credit ? :on_hold_insufficient_credit : :pending
      order = Order.create!(
        order_number: found_code,
        product: product,
        user: @user,
        status: order_status,
        quantity: quantity,
        unit_price: unit_price,
        total_amount: total_amount,
        facebook_comment_id: data[:id],
        facebook_user_id: data[:from][:id],
        facebook_user_name: data[:from][:name],
        facebook_live_id: @live_id,
        comment_time: Time.parse(data[:created_time]),
      )

      puts "\e[32m[‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à] Order: #{order.order_number} (status: #{order.status})\e[0m"
      return order
    rescue ActiveRecord::RecordInvalid => e
      puts "\e[31m[‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à] Validation failed: #{e.message}\e[0m"
      puts "\e[31mValidation errors: #{e.record.errors.full_messages}\e[0m"
      return nil
    rescue StandardError => e
      puts "\e[31m[Unexpected error creating order] #{e.message}\e[0m"
      return nil
    end
  end

  private

  #   def send_checkout_link(order)
  #     checkout_url = order.checkout_url
  #     @comment_id = order.facebook_comment_id # ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö fallback

  #     reply_message = "‚úÖ ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ #{order.product.productName}
  # üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤ #{order.total_amount} ‡∏ö‡∏≤‡∏ó
  # üîó ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Ñ‡∏•‡∏¥‡∏Å‡∏•‡∏¥‡∏á‡∏Ñ‡πå‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô: #{checkout_url}
  # ‚è∞ ‡∏•‡∏¥‡∏á‡∏Ñ‡πå‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á"

  #     Rails.logger.info "Sending private message to user #{order.facebook_user_id}: #{reply_message}"

  #     # Send Facebook private message instead of public reply
  #     # send_private_message(order.facebook_user_id, reply_message)
  #   end

  # def send_private_message(user_id, message)
  #   return unless @access_token.present?

  #   begin
  #     # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏ú‡πà‡∏≤‡∏ô Facebook Messenger API
  #     response = HTTParty.post("https://graph.facebook.com/v18.0/me/messages",
  #                              body: {
  #                                recipient: { id: user_id },
  #                                message: { text: message },
  #                                access_token: @access_token,
  #                              }.to_json,
  #                              headers: {
  #                                "Content-Type" => "application/json",
  #                              })

  #     if response.success?
  #       Rails.logger.info "Facebook private message sent successfully to user #{user_id}"
  #     else
  #       Rails.logger.error "Facebook private message failed: #{response.body}"
  #     end
  #   rescue StandardError => e
  #     Rails.logger.error "Error sending Facebook private message: #{e.message}"
  #     # Fallback: ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î error ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô comment reply ‡πÅ‡∏ó‡∏ô
  #     Rails.logger.info "Falling back to comment reply due to error..."
  #   end
  # end
end
